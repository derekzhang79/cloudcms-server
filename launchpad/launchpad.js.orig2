var net = require("net");
var cluster = require("cluster");
var http = require("http");
var Random = require("random-js");
var async = require("async");

var hash = function (ip, seed) {

    var hash = ip.reduce(function (r, num) {
        r += parseInt(num, 10);
        r %= 2147483648;
        r += (r << 10);
        r %= 2147483648;
        r ^= r >> 6;
        return r;
    }, seed);

    hash += hash << 3;
    hash %= 2147483648;
    hash ^= hash >> 11;
    hash += hash << 15;
    hash %= 2147483648;

    return hash >>> 0;
};

var internals = {
    workers: [],
    seed: 0,
    //header: 'x-forwarded-for',
    //republishPacket: node96Republish,
    //sync: {
    //    isSynced: false,
    //    event: 'launchpad:syn'
    //},
    random: new Random(Random.engines.mt19937().autoSeed()),
    factory: null,
    complete: function() { },
    num: -1
};
internals.seed = internals.random.integer(0x0, 0x80000000);

/**
 * Access 'private' object _handle of file descriptor to republish the read packet.
 */
/*
var node96Republish = function(fd, data) {
    fd._handle.onread(new Buffer(data), 0, data.length);
};
*/


/**
 * Hash balanced layer 3 connection listener.
 */
var layer3HashBalancedConnectionListener = function(c) {

    /*
     client connected: _connecting,_handle,_readableState,readable,domain,_events,_maxListeners,_writableState,writable,allowHalfOpen,onend,destroyed,bytesRead,_bytesDispatched,_pendingData,_pendingEncoding,server,read,listen,setTimeout,_onTimeout,setNoDelay,setKeepAlive,address,_read,end,destroySoon,_destroy,destroy,_getpeername,remoteAddress,remotePort,_getsockname,localAddress,localPort,write,_write,bytesWritten,connect,ref,unref,push,unshift,setEncoding,pipe,unpipe,on,addListener,resume,pause,wrap,setMaxListeners,emit,once,removeListener,removeAllListeners,listeners
     */

    //console.log ("client connected: " + c.remoteAddress + ":" + c.remotePort);

    // Get int31 hash of ip
    //var ipHash = hash((c.remoteAddress || '').split(/\./g), internals.seed);
    //var index = ipHash % internals.workers.length;

    // Pass connection to worker
    var index = internals.random.integer(0, internals.workers.length - 1);

    var worker = internals.workers[index];
    if (worker)
    {
        worker.send('launchpad:connection', c);
    }
};

/**
 * Hash balanced layer 4 connection listener.
 *
 * The node is choosen randomly initial and gets hash balanced later in patchConnection.
 */
/*
var layer4HashBalancedConnectionListener = function(c)
{
    var index = internals.random.integer(0, internals.workers.length - 1);

    var worker = internals.workers[index];
    if (worker)
    {
        worker.send('launchpad:sync', c);
    }
};
*/

/**
 * Hash balance on the real ip and send data + file descriptor to final node.
 */
/*
var patchConnection = function(c, fd)
{
    // Get int31 hash of ip
    var worker;
    var ipHash = hash((c.realIP || '').split(/\./g), internals.seed);

    // Pass connection to worker
    worker = internals.workers[ipHash % internals.workers.length];
    worker.send({cmd: 'launchpad:connection', data: c.data}, fd);
};
*/

var launchPad = function(options)
{
    var connectionListener = layer3HashBalancedConnectionListener;
    var num = options.num;
    if (!num) {
        num = require("os").cpus().length;
    }

    var factoryCallback = options.factory;
    var reportCallback = options.report;
    if (!reportCallback) {
        reportCallback = function() { };
    }
    var completionCallback = options.complete;
    if (!completionCallback) {
        completionCallback = function() { };
    }

    /**
     * Set connectionListener to layer4HashBalancedConnectionListener
     * if proxy is set to true.
     */
    //if (options.proxy)
    //{
    //    connectionListener = layer4HashBalancedConnectionListener;
    //}

    /**
     * Changing the header if user specified something else than
     * 'x-forwarded-for'.
     */
    //if (options.header)
    //{
    //    internals.header = options.header;
    //}

    /**
     * Overwriting sync object to sync with users options.
     */
    //if (options.sync)
    //{
    //    internals.sync = options.sync;
    //}

    if (cluster.isMaster)
    {
        internals.workers = [];
        var fns = [];
        for (var i = 0; i < num; i++)
        {
            var fn = function (i, workers) {
                return function (done) {

                    var spawn = function (i, afterSpawnFn) {

                        if (!afterSpawnFn) {
                            afterSpawnFn = function () { };
                        }

                        workers[i] = cluster.fork();

                        // Restart worker on exit
                        workers[i].on('exit', function () {
                            console.error('launchpad: worker died');
                            spawn(i);
                        });

                        workers[i].on('message', function (msg, c) {

                            /*
                            if (typeof msg === 'object') {

                                if (msg.cmd === 'launchpad:ack')
                                {
                                    patchConnection(msg, c);
                                }
                            }
                            */

                            if (msg === "server-startup")
                            {
                                afterSpawnFn();
                            }
                        });
                    };
                    spawn(i, function () {
                        done();
                    });
                };
            }(i, internals.workers);
            fns.push(fn);
        }

        async.parallel(fns, function (err) {

            var server = net.createServer(connectionListener);

            var port = process.env.PORT || 2999;
            server.listen(port);

            // tell the first worker to report
            if (internals.workers.length > 0)
            {
                internals.workers[0].send("server-report");
            }

            setTimeout(function() {
                completionCallback(server);
            }, 250);

        });
    }
    else
    {
        factoryCallback(function(server) {

            // Worker process
            process.on("error", function() {
                console.log("ERRRRR");
            });

            process.on('message', function (msg, msgData) {

                /*
                if (msg === 'launchpad:sync') {

                    // Reading data once from file descriptor and extract ip from the header.
                    msgData.once('data', function (data) {
                        var strData = data.toString().toLowerCase();
                        var searchPos = strData.indexOf(internals.header);
                        var endPos = 0;

                        // If the header was not found return, probably unwanted behavior.
                        if (searchPos === -1) {
                            return;
                        }

                        searchPos = strData.indexOf(':', searchPos) + 1;

                        strData = strData.substr(searchPos);

                        endPos = strData.search(/\r\n|\r|\n/, searchPos);
                        strData = strData.substr(0, endPos).trim().split(':', 1);
                        strData = strData[0];

                        // Send acknowledge + data and real ip address back to master
                        process.send({cmd: 'launchpad:ack', realIP: strData, data: data}, msgData);
                    });
                }
                */

                if (typeof msg === 'object')
                {
                    if (msg.cmd === 'launchpad:connection') {
                        //var sync = internals.sync;

                        /**
                         * We register the event, to synchronize the data republishing
                         * if the user wants for some reason manually call the sync.
                         */
                        /*
                        if (sync.isSynced) {
                            msgData.once(sync.event, function () {
                                internals.republishPacket(msgData, msg.data);
                            });
                        }
                        */

                        server.emit('connection', msgData);

                        /**
                         * We're going to push the packet back to the net controller,
                         * to let this node complete the original request.
                         */
                        /*
                        if (!sync.isSynced) {
                            internals.republishPacket(msgData, msg.data);
                        }
                        */
                    }
                }
                else if (msg === "server-report")
                {
                    reportCallback();
                }
                else if (msg === "launchpad:connection")
                {
                    server.emit('connection', msgData);
                }
            });
        });
    }
};

module.exports = launchPad;